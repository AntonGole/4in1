using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using LostPolygon.Apple.LocalMultiplayer;
using LostPolygon.Apple.LocalMultiplayer.Networking;

/**
 * A custom device browser that waits for X other peers to announce themselves before trying to join
 * the peer with the highest "coolness value"
 */
[RequireComponent(typeof(CITERoomManager))]
public class RoomJoinBrowser : MonoBehaviour, ICustomDeviceBrowser {
        public event Action OnOpened;
        public event Action OnClosing;
        public event Action<PeerId> OnPeerPicked;

        public int minRequirement = 4;
        private string UUID;
        private Dictionary<string,string> waitingAdvertisement;
        private Dictionary<string,string> serverAdvertisement;
        private CITERoomManager roomManager;

        private Dictionary<PeerId, IDictionary<string,string>> foundPeers;
        private float roomStartTime;

        public float initialJoinTimeout = 5; // In seconds

    public delegate void OnDiscoveryListSizeChange(int newSize);
    public event OnDiscoveryListSizeChange listSizeListeners;
    public delegate void OnJoiningServer();
    public event OnJoiningServer joiningServerListeners;


    private void OnEnable() {
            UUID = Guid.NewGuid().ToString();
            foundPeers = new Dictionary<PeerId, IDictionary<string,string>>();
            AppleLocalMultiplayer.CustomPeerDiscovery.PeerFound += OnCustomPeerDiscoveryPeerFound;
            AppleLocalMultiplayer.CustomPeerDiscovery.PeerLost += OnCustomPeerDiscoveryPeerLost;

            waitingAdvertisement = new Dictionary<string, string> {
                { "UUID", UUID },
                { "deviceName", SystemInfo.deviceName },
                { "platform", Application.platform.ToString() },
                { "deviceModel", SystemInfo.deviceModel },
                { "operatingSystem", SystemInfo.operatingSystem },
                { "systemLanguage", Application.systemLanguage.ToString() }
            };
            serverAdvertisement = new Dictionary<string, string> {
                { "server", "absolutely" },
                { "UUID", UUID },
                { "deviceName", SystemInfo.deviceName },
                { "platform", Application.platform.ToString() },
                { "deviceModel", SystemInfo.deviceModel },
                { "operatingSystem", SystemInfo.operatingSystem },
                { "systemLanguage", Application.systemLanguage.ToString() }
            };
            roomManager = GetComponent<CITERoomManager>();
            roomManager.DiscoveryInfo = serverAdvertisement;
            roomStartTime = 0;

            Debug.Log("Enabled room-joining with "+minRequirement+" minimal requirement");
        }

        private void OnDisable() {
            AppleLocalMultiplayer.CustomPeerDiscovery.PeerFound -= OnCustomPeerDiscoveryPeerFound;
            AppleLocalMultiplayer.CustomPeerDiscovery.PeerLost -= OnCustomPeerDiscoveryPeerLost;
        }

        public void Open() {
            Debug.Log("Searching for others to join room...");
            foundPeers.Clear();
	    roomStartTime = 0;
            listSizeListeners(foundPeers.Count);
            AppleLocalMultiplayer.CustomPeerDiscovery.StartDiscovery();
            // Set discovery info for advertising this system to other peers
            AppleLocalMultiplayer.CustomServiceAdvertiser.StartAdvertising(waitingAdvertisement);
            if (OnOpened != null){
                OnOpened();
            }
        }

        public void Close() {
            AppleLocalMultiplayer.CustomPeerDiscovery.StopDiscovery();
            AppleLocalMultiplayer.CustomServiceAdvertiser.StopAdvertising();
        if (OnClosing != null){
                OnClosing();
            }
        }

        public void Update(){
	     CITENetworkManager server = GetComponent<CITENetworkManager>();
	     if (roomStartTime > 0 && Time.time > roomStartTime + initialJoinTimeout){
                // We are server for room that has just started - do a check for peerCount after a short while just to make sure
                if (server.GetConnectionCount()<minRequirement-1){
                    Debug.Log("Not enough connected players on this server after initial join timeout, killing everything and restarting");
		    server.error();
                } else {
                    Debug.Log("Room started successfully, everyone is happy");
                    roomStartTime = -1;
                }
            } else if (roomStartTime!=0 && !AppleLocalMultiplayer.Session.IsSessionActive){
		Debug.Log("Session connection got dropped, restarting everything");
		server.error();
	    }
        }

        private void OnCustomPeerDiscoveryPeerFound(PeerId peerId, IDictionary<string, string> peerDiscoveryInfo) {
            foundPeers.Add(peerId, peerDiscoveryInfo);
            Debug.Log("New peer spotted "+peerId+" ("+foundPeers.Count+" peers and ourself so far)...");
            Debug.Log(AppleLocalMultiplayerNetworkManagerHelper.FormatDiscoveryInfo(peerDiscoveryInfo));
            listSizeListeners(foundPeers.Count);

            // If a server appeared, join it before processing anything else
            try {
                if (peerDiscoveryInfo["server"]!=null){
                    Debug.Log("Joining server "+peerId);
		    joiningServerListeners();
		    roomStartTime = -1;
                    OnPeerPicked(peerId);
                }
            } catch (KeyNotFoundException){
                // Not a server
            }

	    // Last peer in this update and we are waiting for room to start
	    if (AppleLocalMultiplayer.Session.GetConnectedPeersCount()==foundPeers.Count && foundPeers.Count>=minRequirement-1){ // (-1 since we are also a "peer" but not in the list)
                // Enough peers seen to create the room, check if we should serve it as the server
                bool weRule = true;
                Debug.Log("Enough players to start room, my UUID is = " + UUID);
                foreach(KeyValuePair<PeerId, IDictionary<string,string>> peerEntry in foundPeers){
                    try {
                        if (peerEntry.Value["UUID"].CompareTo(UUID)>0){
                            weRule = false;
                        }
                    } catch (KeyNotFoundException){
                        Debug.Log("Found a peer that wasn't cool at all: "+peerEntry.Key);
                    } 
                }
                if (weRule){
                    // We are the coolest peer, start the server
                    Debug.Log("We are the server - waiting for people to join us");
		    joiningServerListeners(); // Starting a server also counts as joining it
		    forceCreateServer();
                }
            }
         }

	public void forceCreateServer(){
	    Debug.Log("Creating server");
            Close();
            AppleLocalMultiplayer.Session.StopSession();
            AppleLocalMultiplayer.Session.SetLocalPeerName(SystemInfo.deviceName+"S");
            roomStartTime = Time.time;
            roomManager.StartHost();
	}

        private void OnCustomPeerDiscoveryPeerLost(PeerId peerId) {
            Debug.Log("Peer vanished "+peerId+"...");
            foundPeers.Remove(peerId);
            listSizeListeners(foundPeers.Count);
        }

}
