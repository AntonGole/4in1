var WebWrapper = {
    $nativeTransportInstances: [],

	createNativeWebWrapper: function(transportID, uri, onConnected, onDisconnected, onData) {
        var onConnectedJSAction = function(connectionID){
            Runtime.dynCall('vii', onConnected, [transportID, connectionID]);            
        }
        var onDisconnectedJSAction = function(connectionID){
            Runtime.dynCall('vii', onDisconnected, [transportID, connectionID]);            
        }
        var onDataJSAction = function(peer, buffer){
            var array = new Uint8Array(buffer.data);
            var ptr = _malloc(array.length);
            var dataHeap = new Uint8Array(HEAPU8.buffer, ptr, array.length);
            dataHeap.set(array);
            Runtime.dynCall('viiii', onData, [transportID, peer, ptr, array.length]);
            _free(ptr);
        }

        var transport;
        switch (Pointer_stringify(uri)){
            // No-config URIs first
            case "webstrate-signalling://client":
                transport = new SignalTransport(false, onConnectedJSAction, onDisconnectedJSAction, onDataJSAction);
                break;
            case "webstrate-signalling://server":
                transport = new SignalTransport(true, onConnectedJSAction, onDisconnectedJSAction, onDataJSAction);
                break;
            default:
                console.log("Unknown URI format for transport "+transportID+": "+Pointer_stringify(uri));
                break;
        }
	    
        // Store its reference for later
        nativeTransportInstances[transportID] = transport;
    	console.log("CITEWebWrapper native ["+transportID+"] checking in");
        console.log(transport);
	},

    isConnectedJS: function(transportID){
        return nativeTransportInstances[transportID].isConnected();
    },
   
    disconnectJS: function(transportID){
        nativeTransportInstances[transportID].disconnect();
    },

    sendJS: function(transportID, peers, peerSize, channel, ptr, length){
        // Unmarshal peers array
        var peersJS = [];
        for(var i = 0; i < peerSize; i++){
            peersJS[i] = HEAP32[(peers >> 2) + i];
        }

        // And send it along
        nativeTransportInstances[transportID].send(peersJS, channel, HEAPU8.buffer.slice(ptr, ptr+length));
        return true; //TODO
    },
    
    kickJS: function(transportID, peer){
        nativeTransportInstances[transportID].kick(peer);
    },

    getAddressJS: function(transportID, peer){
	var returnStr = nativeTransportInstances[transportID].getAddress(peer);
	var bufferSize = lengthBytesUTF8(returnStr) + 1;
	var buffer = _malloc(bufferSize);
        stringToUTF8(returnStr, buffer, bufferSize);
        return buffer;
    },

    toStringJS: function(){
	var returnStr = nativeTransportInstances[transportID].toString();
	var bufferSize = lengthBytesUTF8(returnStr) + 1;
	var buffer = _malloc(bufferSize);
        stringToUTF8(returnStr, buffer, bufferSize);
        return buffer;
    }
};

autoAddDeps(WebWrapper, '$nativeTransportInstances');
mergeInto(LibraryManager.library, WebWrapper);
